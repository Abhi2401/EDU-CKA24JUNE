#######################
#CKA - 24th June 2023
#######################


Day - 1

	Introduction to VM/Containers/Kubernetes
	
	Lab Access :::
	
	AWS Free Tier Account to Practise Kubernetes
	
	
	Kubernetes is Container Orchestration Tool ::::
	
	Deployment :::
	
		- Install & run application
		- Deploy to qa/ and further testing 
		
	Testing ::::
	
	
	Development of Application ::::
	
	
	How the application is developed ? 
	What are the process/approaches involved ??
	
	- business needs -->
	
	
		Monolith Application Architecture
		
			Core Banking Application developed in legacy environments
			
			Continuous Delivey / Deployment
		
		Micro-Service Based Application Architecture
		
		E_Commerce 
		Online_Banking System == Web based. 
			Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - Deploy this as a service. - Containers 
			Customer Login						==> Code, Tested , Deployed to Prod.
			Customer Transaction Module			==> Code, Tested , Deployed to Prod.
		
	Container Orchestration Tool	
	
		Kubernetes is the Open Source Container Orchestration Tools 
		
		Docker Swarm -- Container Orchestration Tool
		
		AWS 		EKS
		AZURE 		AKS
		GCP 		GKS
		
		
	Container ????
	
	
		Application Build ???
		Dev Environment ::
		
			--> Build --> Is a process of compile the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
			
				cust_regis.war_SNAPSHOT_v1.0		- working as expected in UT.	--> Maven/		tomcat8.0/jdk1.8
				Unit Testing
			
			
		Non - Prod Environment																	Prod Environment

		Dev
			
		Test 
			QA				cust_regis.war_SNAPSHOT_v1.0	tomcat9.0/jdk1.6
			UAT 			cust_regis.war_SNAPSHOT_v1.0	tomcat8.5.0/openjdk17
		Pre-Prod/Staging							------>										Prod	cust_regis.war_SNAPSHOT_v1.0	tomcat8.5.0/openjdk17						
	
	
		Deployment :::		Process of copying the artifacts to Higher environments
		
		
		Dev ::: 
				cust_regis.war_SNAPSHOT_v1.0
				
				Package the application along with the depencies ::: (cust_regis.war_SNAPSHOT_v1.0 + tomcat8.0/jdk1.8)		-->	 Pkg1
				
				Application Image 	-->		Static file (cust_regis.war_SNAPSHOT_v1.0 + tomcat8.0/jdk1.8)
				Containers			-->		Executable of Images -- > 	 
				
	
		Targets ::::
			QA 			--> Pkg1
			UAT			--> pkg1
			Prod		--> pkg1
			
			
		Containers are Lightweight 	--> It is used to run application.
						
		Virtual Machine 			--> Computing Device ==> running in remote environments		
		
		Virutal Machines are used to run OS -> run the applications
		VM will be up and running and consumes the resource even if there is no application are running.
		
		
		Containers are used to reduce the no. of VMs.
		
		VMS are considered as Hardware Level Virtualization 
		Container are considered as OS Level Virtualization --> inherit the properties of base OS 
			Namespaces - CGroups
			
			
		Container Engine :::: meant Linux OS 
		
		Docker Desktop for Windows / Linux / Mac 
		
		Container Registry ==> download the base Img - ubuntu1.0 ==> ubuntu2.0
		
	
		Container Orchestration ::::
		
		
		Micro-Service Based Application Architecture
		
		E_Commerce 
		Online_Banking System == Web based. 
			Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - Deploy this as a service. - Containers 
			Customer Login						==> Code, Tested , Deployed to Prod.
			Customer Transaction Module			==> Code, Tested , Deployed to Prod.	
		
		3-tier architecture ::=---> Frontend, Application_Logic,Backend(DataBase)
		
		Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - 
		
											Deploy this as a service. - Containers
											Frontend - c1		
											Application_Logic - c2 ----> 
											Backend(DataBase) - c3
											
											
		Tools -- to monitor and ensure high availability of the application containers 
		Container Orchestration :::
		
		- Kubernetes Architecture
		- Kubernetes Concepts 
		- Volumes 
		- Services 
		- Networking 
	
	- Kubernetes Architecture :::
	
			Master / Worker Nodes 
			
			
		Kubernetes_Master		(VM)
			Kubernetes_Cluster
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
		
		
		Container Images are stored and Managed in Container Registry
		
		Docker ---> DockerHub 
		
		AWS --> ECS --> ECR --> EKS
		AZ 	--> ACS --> ACR --> AKS
		
		
		pod --> is a atomic unit of sheduling --> 
		

	Kubernetes_Master		(VM) (Passive)
		Kubernetes_Master		(VM) (Active)
		
			Kubernetes_Cluster (Active)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
				
			Kubernetes_Cluster (Passive)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
				
			Kubernetes_Master	
					Kubernetes_Master1		(VM) (Active)
					
						Kubernetes_Cluster (Active)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
						Kubernetes_Cluster (Passive)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							

					Kubernetes_Master2		(VM) (Active)
					
						Kubernetes_Cluster (Active)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
						Kubernetes_Cluster (Passive)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
							
		Kubernetes Terminologies ::::
		
			Nodes			-- Master(Control Plane), Cluster(WorkerNodes1,2,3,4,5,.....)
			Images 			-- Is a static file composed of Application and its dependencies
			Containers		-- Instance of Image -- Executable unit of Image
			Pods 			-- Smallest/Atomic unit of Scheduling - Can have one or more containers -- one to one mapping as a best practise.
			Volumes			-- persistant volumes
			Services
			
		
		Computing Device :::			Docker ::::					Kubernetes ::::
		
		
		Virtual Machines				Container  					Pod (1 + 1)
										Docker Compose				Volumes are allocated at pod level
										Volumes are allocated
										
Next :
										
		Create Github 		--> 
		AWS Account 	  	--> 	Free Tier Account
		
		

########################
Day - 2 - 25th June 2023
########################

		Kubernetes Concepts 
		Installation and Configuration of Kubernetes
		

	Kubernetes Concepts :::
	
	
		kubectl
		pods
		Kubernetes Objects 
		Services 
		Volumes 
		HELM
		Troubleshooting 
		Security 
		
	
	Installation and Configuration of Kubernetes :::
	
	For Learning Purpose :
		- https://labs.play-with-docker.com/
		- https://labs.play-with-k8s.com/
		
		- Minikube ==> Learning purpose 
	
	Open-Source Kubernetes(Self-Managed Service)	
	
	Managed Services 	- Cloud Service Providers(AWS/AZ/GCP/DO)
	
	On-Premises ::::
	
		Create Virtual Machines ::::	
		
		Hypervisor 
		
		1. Oracle VirtualBox --> 
		2. Create VMs - 3 (1 + 2)
		3. Use Kubeadm 
		
	Open-Source Kubernetes(Self-Managed Service)	 --> Installation & Configuration :
			https://kubernetes.io/docs/setup/
	
		kubeadm ==> Used to Install and Config. Kubernetes
		kubectl ==> Used to work on Kubernetes

		Kubernetes_Master		(VM) (Active)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				
		
		
	VMs ===> Access this VM using using external SSH Client - putty/moboxterm/terminal - Keypair.
			 https://mobaxterm.mobatek.net/download.html
			 
			 
	Kubectl ::::

	Pods :::::
	
	Namespace :::::
	
	
	
	kubectl get nodes
	Namespaces are logical partition of cluster  - -default namespace
	kube-system
	
	


		Non-PROD					PROD 
		
		DEV						
		QA 			Testing 
		UAT 						Prod (VMs)
		Prod
		

		Kubernetes_Master
			cluster1
				Kubernetes_WorkerNode1		
				Kubernetes_WorkerNode2	
				
	Namespace === are logical partition of cluster  - default namespace
	
	kubectl create namespace QA
	
	kubectl create namespace QA
	Non-Prod ::
		Kubernetes_Master							
			cluster1						App_Team1,2,3,4
				Kubernetes_WorkerNode1		
				Kubernetes_WorkerNode2
				Kubernetes_WorkerNode3		
				Kubernetes_WorkerNode4
				Kubernetes_WorkerNode5		
				Kubernetes_WorkerNode6
				
	kubectl create namespace App_Team1


########################
Day - 3 - 1st July 2023
########################
	
		Concepts of Kubernetes ::::		
		
		Kubectl :::			
		
		Pods :::
		
		Controller Objects :::
			Replicasets 
			Replication Controllers 
			DaemonSets 
			Deployments 
		Volumes :::
			EmptyDir 
			Hostpath
			Config_Maps
			Secrets
			
		The kubernetes objects can be created using kubectl adhoc commands / using Manifest file.
		
		Manifest file ---> *.yaml file
		
		Container Registry ==> 
		
			Organization 			==> Add Users to this Org.
				Repositories 
					Create Images 
		
		Create Pod ::::
		
		
		docker exec ===> login to running containers 
		
		kubectl exec ==> login to runnig containers 
		
		
		Create an simple Nginx Pod Images

		Login to the running pod 
		
		create some file - html file 
		
		save the changes 
		
		Access the pod using web browser .
		
		Docker -- port Mapping / Binding 
		
		
		NodePort - is a service used to expose the pod to internet.
		
		Services :::
		
			ClusterIP
			NodePort 
			LoadBalancer		--> IP - DNS -->  
			
			
		Pod ==> 
		
		
		docker run -it -p 8087:80 nginx
		
		
		Master 
		
			Worknodes 
			
			
		
		
		
		VM ===> nginx appln ==> localhost:80
		
		VM --> Docker_Container ==> nginx appln ==> Public_Ip:8087 ===> to achieve -p 8087:80
		
		VM --> Pod (Docker_Container ==> nginx appln) ==> Public_Ip:31000 ===> to achieve -- NodePort Service - 80:31000
		
		
		How to create manifest for Pod definition
		
		How to expose a pod to internet
		
		
		2 WN 
		
		Create the replicas of pods and deploy it in all the nodes.
		
		Controller Manager ===> It is always used to run the pods in its desired state.
		
		my desired state is -- I want to run 3 instance(replicas) of pod at any point of time.
		
		Controller Objects :::
			Replicasets 
			***Replication Controllers 
			DaemonSets 
			Deployments 		
		
		
		Replicasets  (vs) Replication Controllers 
		
		Both are used to run a specific no. of pods at any point of time.
		
		RC ==> uses Equality Based Operator to refer the label
		RS ==> uses Set Based Operator to refer the labels
		
		
		Deploy a pod in Dev & QA env. 
		
		envi = dev 
		envi = qa 
		
		envi in (dev,QA)
	 
